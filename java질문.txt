1. JAVA의 장단점
 - 장점 : 가상머신으로 인해 이식성 높다. 어떤 운영체제든 적용 가능
 - 단점 : 컴파일링 과정이 늦다. 응답이 늦어 서버에는 적합하지 않다.
 - 주의 : 멀티스레드 제공? 멀티스레드는 요새 언어들은 대부분 멀티스레드 제공하기때문에 굳이 자바의 장점이라고 보긴 힘듦
 
2. 객체지향언어
 JAVA, python, C++
 객체를 만들고 사용하는 언어, 유지보수에 유리
 절차지향언어 : C, 파스칼 등인데 3D프린터와 계산기 등을 연산하자
 
3. 자바가상머신
메모리 자동 관리해주고 쉽게 다른 운영체제 이식하는 개발 환경 (충전기 핀 바꿔주는 잭?)

4. 클래스
객체의 설계도
예) 자동차 설계도, 붕어빵 틀
자동차, 붕어빵 : 객체
자동차 스펙, 붕어빵 크기 : 필드값

5. 상속
코드 재사용, 상위 클래스의 필드값과 메소드를 하위 클래스가 쉽게 이용
아예 상속을 안 받을 수 있어도 골라서 받는 것은 안된다.

6. 생성자란?
클래스와 이름이 동일한 메소드: 필드 초기화
Human 클래스
Human(String name){this.name=name;}
Human human = new Human("김철수");

7. 오버로딩과 오버라이딩의 차이점

오버로딩: 짐을 쌓는 것, 생성자 변수 추가
오버라이딩: 담벼락을 건너 뛴다. 상위 클래스의 필드값/메소드를 하위 클래스가 이용

8. 추상클래스와 일반클래스의 차이점?
객체화 가능 여부: 추상 클래스 불가, 일반 클래스 가능

9. 추상클래스와 인터페이스 차이점
추상클래스: 클래스, 필드값 설정/ 메소드 내부 코딩 가능
인터페이스: 클래스 x, 필드값 설정 불가 (상수만 가능), 메소드 이름만 지정 가능

10. 내부클래스
클래스 안의 클래스 (중첩 클래스)
필터, 어려운 공식





